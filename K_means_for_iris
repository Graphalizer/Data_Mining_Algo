import operator
import math
import random
import copy

def loadData(pathToFile, clusterSet = []):
    file = open(pathToFile, 'r')
    for line in file:
        # create string without new line symbol '\n'
        string = line[:-1]
        # append splitted string without class index
        clusterSet.append(string.split(',')[:-1])
    file.close()
    for x in range(len(clusterSet)):
        for y in range(len(clusterSet[x])):
            clusterSet[x][y] = float(clusterSet[x][y])


def euclideanDistance(sample1, sample2):
    dist = 0.0
    for i in range(len(sample1)):
        dist += (sample1[i] - sample2[i]) * (sample1[i] - sample2[i])
    return math.sqrt(dist)

def startMean(dataSet, k):
    meanSet = random.sample(dataSet, k)
    return meanSet

def getCluster(dataSet, meanSet):
    for i in range(len(dataSet)):
        distanceList = []
        for j in range(len(meanSet)):
            metric = euclideanDistance(dataSet[i], meanSet[j])
            distanceList.append((metric, j))
        sortDist = sorted(distanceList, key = operator.itemgetter(0))
        #print(sortDist)
        # assign cluster name as meanSet index + 1
        dataSet[i].append(sortDist[0][1]+1)
    #print(dataSet)

def recalculateMean(dataSet, k):
    meanSet = []
    for x in range(k):
        meanSet.append([0]*(len(dataSet[0])-1))
        for j in range(len(dataSet[0])-1):
            count = 0
            for i in range(len(dataSet)-1):
                # class index is (x + 1)
                if (x+1) == dataSet[i][-1]:
                    meanSet[x][j] += dataSet[i][j]
                    count += 1
        for l in range(len(meanSet[x])):
            if count > 0:
                meanSet[x][l] = meanSet[x][l]/count
    return meanSet

def deleteClusterName(dataSet):
    for i in range(len(dataSet)):
        del dataSet[i][-1]

def listCompare(dataset1, dataset2):
    #print(dataset1)
    #print(dataset2)
    if (len(dataset1) + len(dataset2)) == 0:
        return 0
    elif len(dataset1) != len(dataset2):
        return 1
    else:
        count = 0
        for i in range(len(dataset1)):
            if dataset1[i][-1] != dataset2[i][-1]:
                count += 1
        return count

def plotCluster(dataSet, meanSet, k):
    import matplotlib.pyplot as plt
    colors = 'bgr'
    names = ['Sepal length', 'Sepal width', 'Petal length', 'Petal width']
    fig, axes = plt.subplots(len(dataSet[0])-1, len(dataSet[0])-1)
    #print(axes)
    #axes[0][1].set_title('Classification of Iris by K-means Algorithm')
    for n in range(len(dataSet[0])-1):
        for m in range(len(dataSet[0])-1):
            for x in range(k):
                clr = colors[x % len(colors)]
                xcluster = []
                ycluster = []
                for i in range(len(dataSet)-1):
                    if (x+1) == dataSet[i][-1]:
                        xcluster.append(dataSet[i][n])
                        ycluster.append(dataSet[i][m])
                if n == m:
                    axes[m][n].text(0.05, 0.5, names[n], size = 22, name='Tahoma', weight='bold')
                    axes[m][n].set_xticklabels([])
                    axes[m][n].set_yticklabels([])
                    axes[m][n].set_xticks([])
                    axes[m][n].set_yticks([])
                else:
                    axes[m][n].scatter(xcluster, ycluster, color = clr, marker = 'o')
                    axes[m][n].scatter(meanSet[x][n], meanSet[x][m], color = 'black', marker= 'x', s = 30)
                    if (n + m) != 3:
                        axes[m][n].set_xticklabels([])
                        axes[m][n].set_yticklabels([])
    plt.show()

def ClusteringEffectiveness(meanSet, clusterSet, k): # return F0/F1 - quality of clustering
    funcValue = []
    for i in range(k):
        count = 0
        functional = 0
        for j in range(len(clusterSet)):
            if (i+1) == clusterSet[j][-1]:
                functional += euclideanDistance(meanSet[i], clusterSet[j])*euclideanDistance(meanSet[i], clusterSet[j])
                count += 1
        if count > 0:
             functional = functional/count
             funcValue.append(functional)
    F0 = 0
    for x in range(len(funcValue)):
        F0 += funcValue[x]
    MassCenterList = []
    for y in range(len(clusterSet[0])-1):
        MassCenter = 0
        for x in range(len(clusterSet)):
            MassCenter += clusterSet[x][y]/len(clusterSet)
        MassCenterList.append(MassCenter)
    F1 = 0
    for i in range(len(meanSet)):
        F1 += euclideanDistance(meanSet[i], MassCenterList)*euclideanDistance(meanSet[i], MassCenterList)
    return F0/F1

def main():
    clusteringQuality = {}
    clusterSetAfter = []
    k = 3
    # number of random choice of cluster centers
    numberOfiterations = 10
    loadData(r'D:\Data for ML\iris.data', clusterSetAfter)
    for i in range(numberOfiterations):
        clusterSetBefore = []
        meanSet = startMean(clusterSetAfter, k)
        getCluster(clusterSetAfter, meanSet)
        while clusterSetAfter != clusterSetBefore:
            clusterSetBefore = copy.deepcopy(clusterSetAfter)
            meanSet = recalculateMean(clusterSetAfter, k)
            deleteClusterName(clusterSetAfter)
            getCluster(clusterSetAfter, meanSet)
        Fratio = ClusteringEffectiveness(meanSet, clusterSetAfter, k)
        clusteringQuality[Fratio] = meanSet, copy.deepcopy(clusterSetAfter)
        deleteClusterName(clusterSetAfter)
    bestMean = sorted(clusteringQuality.items(), key = operator.itemgetter(0))
    plotCluster(bestMean[0][1][1], bestMean[0][1][0], k)


main()
