import numpy as np
import pandas as pd
#import time
import threading
import concurrent.futures

class ClusteringTask(threading.Thread):
    def __init__(self, idx, arr, numOfThread, barrier, mtx):
        self.idx = idx
        self.arr = arr
        self.numOfThread = numOfThread
        self.barrier = barrier
        self.mtx = mtx
        threading.Thread.__init__(self)

    def run(self):
        try:
            while(not all(noChanges)): # повторять пока перестанут изменяться значения классов
                for i in range(self.idx, len(self.arr), self.numOfThread):
                    pivot = self.arr[i]
                    count = 0
                    distList = []
                    for j in range(len(meanSet)):
                        distList.append( (np.sqrt(np.sum((self.arr[i,:-1] - meanSet[j])*(self.arr[i,:-1] - meanSet[j]))), j) )
                        sortList = sorted(distList, key = lambda x: x[0] )
                        self.arr[i][-1] = sortList[0][1]
                    if pivot[-1] != self.arr[i][-1]:
                        count += 1
                if count == 0:
                    noChanges[self.idx] = True
                b.wait() # ждем все потоки закончат назначать классы, чтобы вычислить новые значения средних
                # recalculate means
                # вычислить новые значения центров кластеров
                with mtx:
                    for i in range(len(meanSet)):
                        mask = (self.arr[:,-1] == i)
                        meanSet[i] = np.sum(self.arr[mask][:,:-1], axis=0)/len(self.arr[mask])

                b.wait() # ждем поток, который перевычисляет значения центров

            #return self.arr
        except threading.BrokenBarrierError:
             print(traceback.print_exc())


def plotCluster(dataSet, meanSet, k):
    import matplotlib.pyplot as plt
    colors = 'bgr'
    names = ['Sepal length', 'Sepal width', 'Petal length', 'Petal width']
    fig, axes = plt.subplots(len(dataSet[0])-1, len(dataSet[0])-1)
    #print(axes)
    #axes[0][1].set_title('Classification of Iris by K-means Algorithm')
    for n in range(len(dataSet[0])-1):
        for m in range(len(dataSet[0])-1):
            for x in range(k):
                clr = colors[x % len(colors)]
                mask = (dataSet[:,-1] == x)
                xcluster = dataSet[mask][:,n]
                ycluster = dataSet[mask][:,m]
                if n == m:
                    axes[m][n].text(0.05, 0.5, names[n], size = 22, name='Tahoma', weight='bold')
                    axes[m][n].set_xticklabels([])
                    axes[m][n].set_yticklabels([])
                    axes[m][n].set_xticks([])
                    axes[m][n].set_yticks([])
                else:
                    axes[m][n].scatter(xcluster, ycluster, color = clr, marker = 'o')
                    axes[m][n].scatter(meanSet[x][n], meanSet[x][m], color = 'black', marker= 'x', s = 30)
                    if (n + m) != 3:
                        axes[m][n].set_xticklabels([])
                        axes[m][n].set_yticklabels([])
    plt.show()

def loadData(pathToFile):
    dataFr = pd.read_csv(pathToFile, header=None, names=['sepL','sepW','petL','petW','name']) #import data in DataFrame
    x = np.array(dataFr.ix[:, 0:4])
    #print(x[:5])
    dataArr = np.append(x, np.zeros((len(x),1), dtype=float), axis=1)
    return dataArr


def startMean(arr, k):
    indexes = np.random.randint(0, 149, k)
    meanSet = arr[indexes][:,:-1]
    return meanSet


if __name__ == '__main__':
    numOfThreads = 10
    k = 3
    noChanges = [False]*numOfThreads
    array = loadData(r'D:\Data for ML\iris.data')
    meanSet = startMean(array, k)
    #print(meanSet)
    mtx = threading.Lock()
    b = threading.Barrier(numOfThreads)
    Exec = concurrent.futures.ThreadPoolExecutor(numOfThreads)
    ftr = concurrent.futures.Future()
    threads = []

    for i in range(numOfThreads):
        threads.append(ClusteringTask(i, array, numOfThreads, b, mtx))
    try:
        for i in range(numOfThreads):
            ftr = Exec.submit(threads[i].start())
    except Exception:
        print(traceback.print_exc())
    finally:
        Exec.shutdown()

    plotCluster(array, meanSet, k)
